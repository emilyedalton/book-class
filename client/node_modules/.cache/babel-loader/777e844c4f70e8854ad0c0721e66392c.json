{"ast":null,"code":"import _defineProperty from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/src/pages/Books.js\";\nimport React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport Form from '../components/Form';\nimport BookPage from \"../components/BookPage\"; //shoudl be the collection fieldnames, so when you call the model it will update the\n\nvar Books =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Books, _Component);\n\n  function Books() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Books);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Books)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      books: [],\n      // title: '',\n      // author: '',\n      // description: '',\n      // image: '',\n      // link: '',\n      // selectedBookid: '',\n      searchTerm: \"\"\n    };\n\n    _this.search = function (query) {};\n\n    _this.deleteBook = function (id) {\n      API.deleteBook(id).then(function (res) {\n        return _this.loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.handleInputChange = function (event) {\n      // Emily, this event is part on the onchangeinput that get the name and value on input tag\n      // you must specific exactly name as \"name\" and value as \"value\"\n      //otherwise you string concatenation for the searchterm won't work\n      var value = event.target.value; //Emily, value attribute from the Form componet get the {this.state.searchTerm}\n\n      var name = event.target.name; //Emily, name attriubute from the Form component get the name attribute called searchTerm\n      //It has to be this name searchTerm because you needed to update the state object that has searchTerm property\n      // that searchTerm has to be the same as the state property\n      // { name, value } = event.target;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (event) {\n      event.preventDefault();\n      API.search(_this.state.searchTerm).then(function (res) {\n        return _this.setState({\n          books: res.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      console.log(_this.state.searchTerm) // .then(res =>\n      //   this.setState({ books: res.data.items})\n      // )\n      // if (this.state.title) {\n      // console.log(this.state.title)// this.search(this.setState.title)        \n      // .then(res.data => this.loadBooks())\n      ;\n    };\n\n    _this.bookSelectedHandler = function (id) {\n      _this.setState({\n        selectedBookid: id\n      });\n\n      alert(\"I'm SAVED\" + id);\n    };\n\n    _this.handleFormSave = function (bookData) {\n      console.log(bookData, \"i am book data\");\n      API.saveBook(bookData) // .then(alert(\"SAVED\") )\n      // .catch(err => console.log(err)) ;\n      // if (this.state.title) {\n      // console.log(this.state.title)// this.search(this.setState.title)        \n      // .then(res.data => this.loadBooks())\n      ;\n    };\n\n    return _this;\n  }\n\n  _createClass(Books, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(Form, {\n        name: \"searchTerm\",\n        value: this.state.searchTerm,\n        onChange: this.handleInputChange,\n        submit: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(Col, {\n        size: \"md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), this.state.books.length ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.state.books.map(function (book) {\n        var _React$createElement;\n\n        return (// Emily, since the thumbnail and authors can be n/A, we need a trinary operator to check to see if it exists\n          React.createElement(BookPage, (_React$createElement = {\n            key: book.id\n          }, _defineProperty(_React$createElement, \"key\", book.id), _defineProperty(_React$createElement, \"title\", book.volumeInfo.title), _defineProperty(_React$createElement, \"subtitle\", book.volumeInfo.subtitle), _defineProperty(_React$createElement, \"link\", book.volumeInfo.infoLink), _defineProperty(_React$createElement, \"authors\", book.volumeInfo.authors ? book.volumeInfo.authors.join(\", \") : \"\"), _defineProperty(_React$createElement, \"description\", book.volumeInfo.description), _defineProperty(_React$createElement, \"image\", book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.thumbnail : \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/480px-No_image_available.svg.png\"), _defineProperty(_React$createElement, \"clickHandler\", function clickHandler() {\n            _this2.handleFormSave({\n              title: book.volumeInfo.title,\n              author: book.volumeInfo.authors,\n              description: book.volumeInfo.description,\n              image: book.volumeInfo.imageLinks.thumbnail,\n              link: book.volumeInfo.canonicalVolumeLink,\n              savedBooks: \"true\"\n            });\n          }), _defineProperty(_React$createElement, \"__source\", {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement))\n        );\n      })) : React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"No Results to Display\"));\n    }\n  }]);\n\n  return Books;\n}(Component);\n\nexport default Books;","map":{"version":3,"sources":["/Users/emilydalton/Desktop/NU_Bootcamp/book-class/client/src/pages/Books.js"],"names":["React","Component","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Form","BookPage","Books","state","books","searchTerm","search","query","deleteBook","id","then","res","loadBooks","catch","err","console","log","handleInputChange","event","value","target","name","setState","handleFormSubmit","preventDefault","data","bookSelectedHandler","selectedBookid","alert","handleFormSave","bookData","saveBook","length","map","book","volumeInfo","title","subtitle","infoLink","authors","join","description","imageLinks","thumbnail","author","image","link","canonicalVolumeLink","savedBooks"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport Form from '../components/Form'\nimport BookPage from \"../components/BookPage\";\n//shoudl be the collection fieldnames, so when you call the model it will update the\nclass Books extends Component {\n  state = {\n    books: [],\n    // title: '',\n    // author: '',\n    // description: '',\n    // image: '',\n    // link: '',\n    // selectedBookid: '',\n    searchTerm: \"\"\n  };\n\n  // componentDidMount() {\n  //   this.loadBooks();\n  // }\n  //res.data.items was the magic thing to get the default term to work\n  // loadBooks = () => {\n  //   API.getBooks()\n  //     .then(res =>\n  //       this.setState({ books: res.data.items})\n  //     )\n  //     .catch(err => console.log(err));\n\n  // };\n  search = query => {\n  \n\n\n  };\n  // if(!resp.ok){\n  //   if(resp.status >=400 && resp.status < 500){\n  //     return resp.json().then(data =>{\n  //       let err ={errorMessage:data.message};\n  //       throw err; \n  //     })\n  //   }\n\n\n  deleteBook = id => {\n    API.deleteBook(id)\n      .then(res => this.loadBooks())\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    // Emily, this event is part on the onchangeinput that get the name and value on input tag\n    // you must specific exactly name as \"name\" and value as \"value\"\n    //otherwise you string concatenation for the searchterm won't work\n\n\n    const value = event.target.value;    \n     //Emily, value attribute from the Form componet get the {this.state.searchTerm}\n    const name = event.target.name;\n    //Emily, name attriubute from the Form component get the name attribute called searchTerm\n    //It has to be this name searchTerm because you needed to update the state object that has searchTerm property\n    // that searchTerm has to be the same as the state property\n    \n    // { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    API.search(this.state.searchTerm)\n    .then(res => this.setState({ books: res.data }))\n    .catch(err => console.log(err));\n    console.log(this.state.searchTerm)\n      // .then(res =>\n      //   this.setState({ books: res.data.items})\n      // )\n      // if (this.state.title) {\n      // console.log(this.state.title)// this.search(this.setState.title)        \n      // .then(res.data => this.loadBooks())\n      ;\n  }\n  bookSelectedHandler = (id) => {\n    this.setState({ selectedBookid: id })\n    alert(\"I'm SAVED\" + id)\n\n  }\n\n  //   postDataHandler = (event) =>{\n  //     this.setState({selectedBookid:true})\n\n  //     const bookData ={\n  //       // books: this.setState.books\n  //  title: books.volumeInfo.title,\n  //  author: book.volumeInfo.authors,\n  //  description: book.volumeInfo.description,\n  //  image: book.volumeInfo.imageLinks.thumbnail,\n  //  link: book.volumeInfo.canonicalVolumeLink\n  //     }\n  //     event.preventDefault();\n  // API.saveBook(bookData)\n  // .then(response => {console.log(response);\n  // })\n  //   }\n\n\n  handleFormSave = bookData => {\n    console.log(bookData, \"i am book data\")\n    API.saveBook(bookData)\n\n\n      // .then(alert(\"SAVED\") )\n      // .catch(err => console.log(err)) ;\n\n\n      // if (this.state.title) {\n      // console.log(this.state.title)// this.search(this.setState.title)        \n      // .then(res.data => this.loadBooks())\n      ;\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <Jumbotron>\n          {/* <h1>What Books Should I Read?</h1> */}\n        </Jumbotron>\n\n{/* Emily, remember the attributes are the ones that you are calling using the dot props\n, you didn't have the right name for the attribute name and value. Also name and value\nare referencing in the inputOnchange event. You need to have the attribute name as \"name\" and\nand value as \"value\" otherwise it will break */}\n\n        <Form\n            name=\"searchTerm\"\n          value={this.state.searchTerm}\n          onChange={this.handleInputChange}\n          submit={this.handleFormSubmit}\n\n        />\n\n\n        {/* <FormBtn\n                // disabled={!(this.state.author && this.state.title)}\n                onClick={this.handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn> */}\n\n\n\n        <Col size=\"md-12\" />\n        {/* <Jumbotron>\n              <h1>Recent Publications in Philosophy</h1>\n            </Jumbotron> */}\n        {this.state.books.length ? (\n          <div>\n            {this.state.books.map(book => (\n// Emily, since the thumbnail and authors can be n/A, we need a trinary operator to check to see if it exists\n\n              <BookPage key={book.id}\n              key={book.id}\n              title={book.volumeInfo.title}\n              subtitle={book.volumeInfo.subtitle}\n              link={book.volumeInfo.infoLink}\n              authors={book.volumeInfo.authors?book.volumeInfo.authors.join(\", \"):\"\"}\n              description={book.volumeInfo.description}\n              image={book.volumeInfo.imageLinks ?book.volumeInfo.imageLinks.thumbnail:\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/480px-No_image_available.svg.png\"}\n                clickHandler={() => {\n                  this.handleFormSave(\n                    {\n                      title: book.volumeInfo.title,\n                      author: book.volumeInfo.authors,\n                      description: book.volumeInfo.description,\n                      image: book.volumeInfo.imageLinks.thumbnail ,\n                      link: book.volumeInfo.canonicalVolumeLink,\n                      savedBooks: \"true\"\n                    })\n                }}\n              />\n\n            ))}\n          </div>\n\n        )\n\n          : (\n            <h3>No Results to Display</h3>\n          )}\n\n\n\n\n      </div>\n\n    )\n  }\n}\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}